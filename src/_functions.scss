// Returns the ratio of two values
// Examples: dk-fluid-aspect(16, 9);
// @param {Int} $a - value 1
// @param {Int} $b - value 2
// @return {Int} - ratio
// Version: 1.0
// Date: 2019-05-08
@function dk-fluid-aspect($a, $b, $percentChar: false) {
  $s: 0;
  
  @if ($percentChar) {
    $s: percentage($a / $b);
  } @else {
    $s: $a / ($b / 100)
  }
    
  @return $s;
}


@function dk-pow($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  }

  @return $value;
}


// Fetch nested map-keys ("Deep-Get")
// @examples:
// dk-map-get($map, color);
// dk-map-get($map, colors, background);
// @param {Map} $map - Map
// @param {Arglist} $keys - Keys to fetch
// @return {*}
// @version 1.0
// @date 2019-05-08
// @see https://www.sitepoint.com/extra-map-functions-sass/ (Map Deep Get)
@function dk-map-get($map, $keys...) {
  // @debug $keys;
  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}


// Set nested map-keys ("Deep-Set")
// @examples:
// dk-map-set($map, color, #000);
// dk-map-set($map, colors, background, #000);
// @param {Map} $map - Map
// @param {String(s)} $keys - Keys to set
// @param {*} $value - Value
// @return {Map}
// @version 1.0
// @date 2019-05-22
// @see https://css-tricks.com/snippets/sass/deep-getset-maps/
@function dk-map-set($args...) {
  $map: nth($args, 1);
  
  $maps: ($map,);
  
  $keys: ();

  @for $i from 2 through length($args) - 1 {
    $keys: append($keys, nth($args, $i));
  }
  
  $value: nth($args, length($args));
  
  $result: null;
  
  
  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == "map" {
    @warn "The last key you specified is a map; it will be overridden with `#{$value}`.";
  }
  
  
  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }
  
    
  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      // @error "Key `#{$current-key}` doesn't exist at current level in map.";
      $current-get: ();
    }
    $maps: append($maps, $current-get);
  }
  

  
  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }
  

  // Return result
  @return $result;
}


// @see https://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/#removing
@function dk-list-remove-nth($list, $index) {
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
  } @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  } @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
  } @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i != $index {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}


// Pixel-to-(R)Em-Conversion
// @param {Int} $px
// @return {Float}
// @version 1.0
// @date 2019-05-21

// You may overwrite this variable.
// Overwrite it BEFORE you use any 'dk-rem(...)'
$dk-fn-rem-to-px-ratio-default-rem-px: 16 !default;

@function dk-rem($value, $unit: rem) {
  $value-unit: unit($value);
  
  // @debug $value + " " + $value-unit;
  
  
  @if (unitless($value) or $value-unit == px) {
    @if ($unit == rem or $unit == em) {
      @return dk-convert-unit($value * (1 / $dk-fn-rem-to-px-ratio-default-rem-px), $unit);
    }
  } @else if ($value-unit == em or $value-unit == rem) {
    @return dk-convert-unit($value, $unit);
  }
}



// Strips a unit from a value
// @param {s} $value
// @return {Float}
// @version 1.0
// @date 2019-05-21
// @see https://codepen.io/MadeByMike/pen/bEEGvv
// @see https://css-tricks.com/snippets/css/fluid-typography/
@function dk-parse-float($value) {
  @return $value / ($value * 0 + 1);
}


// https://stackoverflow.com/a/26359742
@function dk-convert-unit($value, $unit) {
    $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';
    $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;
    $index: index($strings, $unit);

    @if not $index {
      @warn "Unknown unit `#{$unit}`.";
      @return false;
    }

    @return dk-parse-float($value) * nth($units, $index);
}


// Fluid Font-Size
// Make sure that 1.) $min-vw & $max-vw and 2.) $min-value & $max-value have the same unit!
// @version 1.0
// @date 2019-05-21
// @see https://codepen.io/MadeByMike/pen/bEEGvv
// @see https://css-tricks.com/snippets/css/fluid-typography/
@function dk-fluid-type($min-vw, $max-vw, $min-value, $max-value) {
  $vw_delta: $max-vw - $min-vw;
  $value_delta: $max-value - $min-value;
  
  @if (dk-parse-float($min-vw) == 0) {
    @return calc(#{$min-value} + #{dk-parse-float($max-value - $min-value) * (100vw / dk-parse-float($max-vw))});
  } @else if (dk-parse-float($max-vw) == 0) {
    @return calc(#{$min-value} + 1vw);
  } @else {  
    @return calc(#{$min-value - ($value_delta * (dk-parse-float($min-vw / $vw_delta)))} + #{(100vw / dk-parse-float($vw_delta)) * dk-parse-float($value-delta)});
  }
}




